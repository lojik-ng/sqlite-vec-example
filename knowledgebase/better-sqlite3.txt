better-sqlite3 Build Status
The fastest and simplest library for SQLite3 in Node.js.

Full transaction support
High performance, efficiency, and safety
Easy-to-use synchronous API (better concurrency than an asynchronous API... yes, you read that correctly)
Support for user-defined functions, aggregates, virtual tables, and extensions
64-bit integers (invisible until you need them)
Worker thread support (for large/slow queries)
Help this project stay strong! ðŸ’ª
better-sqlite3 is used by thousands of developers and engineers on a daily basis. Long nights and weekends were spent keeping this project strong and dependable, with no ask for compensation or funding, until now. If your company uses better-sqlite3, ask your manager to consider supporting the project:

You must be using Node.js v14.21.1 or above. Prebuilt binaries are available for LTS versions. If you have trouble installing, check the troubleshooting guide.

Why should I use this instead of node-sqlite3?
node-sqlite3 uses asynchronous APIs for tasks that are either CPU-bound or serialized. That's not only bad design, but it wastes tons of resources. It also causes mutex thrashing which has devastating effects on performance.
node-sqlite3 exposes low-level (C language) memory management functions. better-sqlite3 does it the JavaScript way, allowing the garbage collector to worry about memory management.
better-sqlite3 is simpler to use, and it provides nice utilities for some operations that are very difficult or impossible in node-sqlite3.
better-sqlite3 is much faster than node-sqlite3 in most cases, and just as fast in all other cases.
When is this library not appropriate?
In most cases, if you're attempting something that cannot be reasonably accomplished with better-sqlite3, it probably cannot be reasonably accomplished with SQLite3 in general. For example, if you're executing queries that take one second to complete, and you expect to have many concurrent users executing those queries, no amount of asynchronicity will save you from SQLite3's serialized nature. Fortunately, SQLite3 is very very fast. With proper indexing, we've been able to achieve upward of 2000 queries per second with 5-way-joins in a 60 GB database, where each query was handling 5â€“50 kilobytes of real data.

If you have a performance problem, the most likely causes are inefficient queries, improper indexing, or a lack of WAL modeâ€”not better-sqlite3 itself. However, there are some cases where better-sqlite3 could be inappropriate:

If you expect a high volume of concurrent reads each returning many megabytes of data (i.e., videos)
If you expect a high volume of concurrent writes (i.e., a social media site)
If your database's size is near the terabyte range
For these situations, you should probably use a full-fledged RDBMS such as PostgreSQL.